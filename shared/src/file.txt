#![allow(dead_code)]


extern crate libc;
use std::ffi::CString;
use crate::bee::datime;

#[derive(Debug)]
pub enum FileType {
   Unknown,
   Regular,
   Directory,
   CharacterSpecial,
   BlockSpecial,
   Fifo,
   Symlink,
   Socket,
}

pub struct File {
   fd: i32,       // file descriptor
   fpath: String, // path of the file
}

pub fn new(path: &str) -> File {
   File {
      fd: -1,
      fpath: String::from(path),
   }
}

pub fn exists(path: &str) -> bool {
   let cstr = CString::new(path).unwrap();
   unsafe {
      if libc::access(cstr.as_ptr(), libc::F_OK) == 0 {
         return true;
      }
      perror(fpos!());
      false
   }
}

pub fn readable(path: &str) -> bool {
   let cstr = CString::new(path).unwrap();
   unsafe {
      if libc::access(cstr.as_ptr(), libc::R_OK) == 0 {
         return true;
      }
      perror(fpos!());
      false
   }
}

pub fn writable(path: &str) -> bool {
   let cstr = CString::new(path).unwrap();
   unsafe {
      if libc::access(cstr.as_ptr(), libc::W_OK) == 0 {
         return true;
      }
      perror(fpos!());
      false
   }
}

pub fn executable(path: &str) -> bool {
   let cstr = CString::new(path).unwrap();
   unsafe {
      if libc::access(cstr.as_ptr(), libc::X_OK) == 0 {
         return true;
      }
      perror(fpos!());
      false
   }
}

/// Usuwa z dysku plik określonego
/// przez przysłaną ścieżkę.
pub fn remove(path: &str) -> bool {
   let cstr = CString::new(path).unwrap();
   unsafe {
      if libc::remove(cstr.as_ptr()) == 0 {
         return true;
      }
      perror(fpos!());
      false
   }
}

/// Zmiana nazwy pliku (lub move).
pub fn rename(src: &str, dst: &str) -> bool {
   let csrc = CString::new(src).unwrap();
   let cdst = CString::new(dst).unwrap();
   unsafe {
      if libc::rename(csrc.as_ptr(), cdst.as_ptr()) != -1 {
         return true;
      }
      perror(fpos!());
      false
   }
}

fn perror(info: &str) {
   unsafe {
      let cstr = CString::new(info).unwrap();      
      libc::perror(cstr.as_ptr());
   }
}


impl File {

   /// Otwiera plik do odczytu i zapisu.
   pub fn open(&mut self) -> Option<&mut File> {
      if self.fd == -1 {
         unsafe {
            let cstr = CString::new(&self.fpath[..]).unwrap();
            let fd = libc::open(cstr.as_ptr(), libc::O_RDWR);
            if fd != -1 {
               self.fd = fd;
               return Some(self);
            }
            perror(fpos!());
            return None;
         }
      }
      println!("the file already is open ({})", self.fpath);
      None
   }

   /// Tworzy nowy plik.
   pub fn create(&mut self) -> bool {
      if self.fd == -1 {
         unsafe {
            if let Ok(cstr) = CString::new(&self.fpath[..]) {
               let oflag = libc::O_CREAT|libc::O_EXCL|libc::O_RDWR;
               let omod = libc::S_IRUSR | libc::S_IWUSR | libc::S_IRGRP | libc::S_IWGRP | libc::S_IROTH;

               let fd = libc::open(cstr.as_ptr(), oflag, omod);
               if fd != -1 {
                  self.fd = fd;
                  return true;
               }
               perror(fpos!());
               return false;
            }
         }
      }
      println!("the file already is open ({})", self.fpath);
      false
   }

   /// Zamknięcie pliku
   pub fn close(&mut self) -> bool {
      if self.fd == -1 {
         return true;
      }

      unsafe {
         if libc::close(self.fd) == 0 {
            self.fd = -1;
            return true;
         }
         perror(fpos!());
         false
      }
   }

   /// Odczyt całej zawartości pliku.
   pub fn read_all(&self) -> Option<Vec<u8>> {
      if self.fd != -1 {
         if let Some(nbytes) = self.size() {
            // Najpierw przesuń się na początek pliku
            // (mógł już wcześniej być czytany).
            if self.seek_begin() {
               let nbytes = nbytes as usize;
               let mut buffer: Vec<u8> = Vec::with_capacity(nbytes);
               buffer.resize(nbytes, Default::default());

               let n = self.read(&mut buffer);
               if n != -1 {
                  buffer.resize(n as usize, Default::default());
                  buffer.shrink_to_fit();
                  return Some(buffer);
               }
            }
         }
      }
      None
   }

   /// Odczyt określonej liczby bajtów z pliku.
   /// Bajty odczytywane są do przesłanego wektora.
   /// Liczbę bajtów do odczytu określa rozmiar tego wektora.
   pub fn read(&self, buffer: &mut Vec<u8>) -> isize {
      unsafe {
         libc::read(self.fd, buffer.as_mut_ptr() as *mut libc::c_void, buffer.len())
      }
   }


   /// Zapisuje przysłany tekst do pliku.
   /// Jeśli przysłana linia nie kończy się znakiem 'new line',
   /// to ten znak jest dodawany na jej końcu.
   pub fn write_line(&self, text: &str) -> bool {
      if self.fd != -1 {
         let mut buffer: Vec<u8> = String::from(text).as_bytes().to_vec();

         if !buffer.is_empty() {
            if buffer[buffer.len()-1] != b'\n' {
               buffer.push(b'\n');
            }
            unsafe {
               if libc::write(self.fd, buffer.as_ptr() as *const libc::c_void, buffer.len()) != 1 {
                  return true;
               }
            }
         }
      }
      false
   }

   pub fn size(&self) -> Option<i64> {
      if let Some(st) = self.stat() {
         return Some(st.st_size);
      }
      None
   }

   fn seek_current(&self) -> i64 {
      unsafe {
         let offset = libc::lseek(self.fd, 0, libc::SEEK_CUR.into());
         offset
      }
   }

   fn seek_end(&self) -> Option<i64> {
      unsafe {
         let offset = libc::lseek(self.fd, 0, libc::SEEK_END.into());
         if offset != -1 {
            return Some(offset);
         }
      }
      None
   }

   fn seek_begin(&self) -> bool {
      unsafe {
         let offset = libc::lseek(self.fd, 0, libc::SEEK_SET.into());
         if offset != -1 {
            return true;
         }
      }
      false
   }

   /// Wydruk na konsoli informacji o pliku.
   pub fn print_stat(&self) {
      if let Some(st) = self.stat() {
         println!();
         println!("Information from stat {}", '{');
         println!("\t   st_mode: {:?}", self.stat2enum(st.st_mode));
         println!("\t    st_ino: {}", st.st_ino);
         println!("\t    st_dev: {}", st.st_dev);
         println!("\t   st_rdev: {}", st.st_rdev);
         println!("\t  st_nlink: {}", st.st_nlink);
         println!("\t    st_uid: {}", st.st_uid);
         println!("\t    st_gid: {}", st.st_gid);
         println!("\t   st_size: {}", st.st_size);
         println!("\t  st_atime: {}", datime::local_from_tstamp(st.st_atime).unwrap().as_string());
         println!("\t  st_mtime: {}", datime::local_from_tstamp(st.st_mtime).unwrap().as_string());
         println!("\t  st_ctime: {}", datime::local_from_tstamp(st.st_ctime).unwrap().as_string());
         println!("\tst_blksize: {}", st.st_blksize);
         println!("\t st_blocks: {}", st.st_blocks);
         println!("{}", '}');
      }
   }

   /// Odczyt informacji o pliku.
   /// Jeśli plik jest otwarty używamy 'fstat' i deskryptora pliku,
   /// w przeciwnym przypadku używamy 'stat' i ścieżkę do pliku.
   fn stat(&self) -> Option<libc::stat> {
      unsafe {
         let mut status: libc::stat = std::mem::zeroed();
         match self.fd {
            -1 => {
               if let Ok(cstr) = CString::new(&self.fpath[..]) {
                  if libc::stat(cstr.as_ptr(), &mut status) != -1 {
                     return Some(status);
                  }
               }
               None
            }
            _ => {
               if libc::fstat(self.fd, &mut status) != -1 {
                  return Some(status);
               }
               None
            }
         }
      }
   }

   /// Zwraca informację o typu pliku.
   /// Np. czy to file (Regular) czy Directory itd.
   pub fn ftype(&self) -> FileType {
      match self.stat() {
         Some(status) => self.stat2enum(status.st_mode),
         _ => FileType::Unknown,
      }
   }

   fn stat2enum(&self, mode: u32) -> FileType {
      match mode & libc::S_IFMT {
         libc::S_IFREG  => FileType::Regular,
         libc::S_IFDIR  => FileType::Directory,
         libc::S_IFCHR  => FileType::CharacterSpecial,
         libc::S_IFBLK  => FileType::BlockSpecial,
         libc::S_IFIFO  => FileType::Fifo,
         libc::S_IFLNK  => FileType::Symlink,
         libc::S_IFSOCK => FileType::Socket,
                      _ => FileType::Unknown
      }
   }

}